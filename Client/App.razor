@* ensure store is initialized *@
<Fluxor.Blazor.Web.StoreInitializer />

<CascadingAuthenticationState>
    <CascadingValue Value="navigationChecker" Name="@(nameof(NavigationChecker))">
        <Router AppAssembly="@typeof(App).Assembly">
            <Found Context="routeData">
                <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
                <FocusOnNavigate RouteData="@routeData" Selector="h1" />
            </Found>
            <NotFound>
                <PageTitle>Not found</PageTitle>
                <LayoutView Layout="@typeof(MainLayout)">
                    <p role="alert">Sorry, there's nothing at this address.</p>
                </LayoutView>
            </NotFound>
        </Router>
    </CascadingValue>
</CascadingAuthenticationState>

@* 30 minutes *@
<NavigationChecker @ref="navigationChecker" Seconds="@(30 * 60)" JWT_TOKEN_NAME="@JwtConfig.JWT_TOKEN_NAME" JWT_TOKEN_EXP_DATE="@nameof(JwtConfig.JWT_TOKEN_EXP_DATE)"/>

@code {
    private NavigationChecker navigationChecker = default!;
    protected override async Task OnInitializedAsync()
    {
        var authState = await ((ApiAuthenticationStateProvider) AuthenticationStateProvider).GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            if (await localStorageService.GetItemAsync<long?>(nameof(JwtConfig.JWT_TOKEN_EXP_DATE)) == null)
            {
                await localStorageService.SetItemAsync(nameof(JwtConfig.JWT_TOKEN_EXP_DATE), JwtConfig.JWT_TOKEN_EXP_DATE);
            }
        }
    }
    private async Task OnNavigateAsync(NavigationContext args)
    {
        navigationChecker.SetPageDirtyValue(false);
        await HandyBlazorService.ResetFormStates();
    }
}