@page "/contact"

@using System.Timers
@inject HttpClient httpClient



<h1 class="text-center">Contact Me</h1>

<div class="text-center">
    <p>
        I am excited to meet and work with you! We progress better together so please don't hesitate to contact me using
        the form below.
    </p>
</div>

<div class="container-fluid">
    <EditForm Model="@Model" OnValidSubmit="HandlePostContact">
        <div class="card">
            <h4 class="text-center card-header">
                Contact Form
            </h4>
            <div class="card-body">
                <DataAnnotationsValidator />
                <p class="form-group">
                    <label class="m-2">Name</label>
                    <InputText @bind-Value="Model.Name" class="form-control" />
                    <ValidationMessage For="@(() => Model.Name)" />
                </p>
                <p class="form-group">
                    <label class="m-2">Email</label>
                    <InputText @bind-Value="Model.Email" class="form-control" />
                    <ValidationMessage For="@(() => Model.Email)" />
                </p>
                <p class="form-group">
                    <label class="m-2">Subject</label>
                    <InputText @bind-Value="Model.Subject" class="form-control" />
                    <ValidationMessage For="@(() => Model.Subject)" />
                </p>
                <p class="form-group">
                    <label class="m-2">Message</label>
                    <InputTextArea @bind-Value="Model.Message" class="form-control" />
                    <ValidationMessage For="@(() => Model.Message)" />
                </p>
            </div>
            <div class="m-3">
                <button class="btn btn-primary btn-with-shadow">Submit (@submissionCount submissions)</button>
            </div>
        </div>
    </EditForm>
</div>

@if (isCooldown)
{
    <p class="text-bg-warning">Please wait @cooldownSeconds seconds before submitting again.</p>
}

@*

github A-records

185.199.108.153
185.199.109.153
185.199.110.153
185.199.111.153

*@

<NotificationModal @ref="notificationModal" />

@code {

    protected ContactMeDTO Model = new();
    private NotificationModal notificationModal = default!;
    private int submissionCount = 0;
    private bool isCooldown = false;
    private const int COOL_DOWN_TIME = 30;
    private int cooldownSeconds = COOL_DOWN_TIME; // Cooldown in seconds
    private Timer cooldownTimer;

    private void StartCooldownTimer()
    {
        cooldownTimer = new Timer(1000); // Set the interval to 1 second
        cooldownTimer.Elapsed += OnCooldownElapsed;
        cooldownTimer.Start();
    }

    private void OnCooldownElapsed(object sender, ElapsedEventArgs e)
    {
        cooldownSeconds--;

        if (cooldownSeconds == 0)
        {
            cooldownTimer.Stop();
            cooldownTimer.Dispose();
            isCooldown = false;
            cooldownSeconds = COOL_DOWN_TIME; // Reset cooldown for next submission
        }

        InvokeAsync(StateHasChanged); // Refresh the UI
    }

    // Dispose timer when component is disposed
    public void Dispose()
    {
        cooldownTimer?.Dispose();
    }

    protected async Task HandlePostContact()
    {
        //System.Console.WriteLine($"posting model: {Model}");

        if (isCooldown)
        {
            return;
        }

        submissionCount++;
        isCooldown = true;

        // Start the cooldown timer
        StartCooldownTimer();

        var response = await
        httpClient.PostAsJsonAsync($"", Model);

        if (response.IsSuccessStatusCode)
        {
            //Console.WriteLine(response.Content.ReadAsStringAsync());
            Model = new();

            notificationModal.Show("Success", "Thank you! Your message has been sent!", ModalType.SUCCESS);
        }
        else
        {
            Console.WriteLine("failed");
            notificationModal.Show("Error", "Couldn't process your message", ModalType.ERROR);
        }
    }
}
