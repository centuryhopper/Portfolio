@page "/addblog"
@using System.Text
@inject NavigationManager Navigation

<h3>Add Blog</h3>

<div class="text-center">
    <button class="btn btn-primary" @onclick="BackToBlogs">Back to Blogs</button>
</div>

<EditForm Model="@BlogDTO" OnValidSubmit="SubmitBlog">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="Title">Title</label>
        <InputText id="Title" @bind-Value="BlogDTO.Title" class="form-control" />
        <ValidationMessage For="@(() => BlogDTO.Title)" />
    </div>

    <div class="form-group">
        <label for="FullDesc">Description</label>
        <InputTextArea id="FullDesc" @bind-Value="BlogDTO.FullDesc" class="form-control" />
        <ValidationMessage For="@(() => BlogDTO.FullDesc)" />
    </div>

    <div class="form-group">
        <label for="Images">Upload Images</label>
        <InputFile OnChange="HandleFilesSelected" multiple accept="image/*" />
    </div>

    <div class="form-group">
        @if (imagePreviews?.Any() == true)
        {
            foreach (var imageUrl in imagePreviews)
            {
                <img src="@imageUrl" alt="Image preview" style="max-width: 200px; margin-top: 10px;" />
            }
        }
    </div>

    <div class="m-3">
        <input class="form-control" type="number" max="5" min="0" placeholder="Enter number of videos you want to add" 
               @bind="NumVideos" onkeypress="return event.charCode >= 48 && event.charCode <= 57">
        <input type="button" class="btn btn-secondary m-3" value="Add Videos" @onclick="AddVideos">
    </div>

    @if (VideoUrls.Count > 0)
    {
        @for (int i = 0; i < VideoUrls.Count; i++)
        {
            var index = i;
            <div class="m-3 row">
                <div class="col">
                    <label>Video URL @(index+1)</label>
                    <input class="form-control" type="text" @bind="VideoUrls[index]" placeholder="Enter video URL" />
                </div>
                <div class="col">
                    <input type="button" class="btn btn-danger" @onclick="() => RemoveVideo(index)" value="Remove">
                </div>
            </div>
        }
    }

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>



<NotificationModal @ref="notificationModal" />


@code {
    private NotificationModal notificationModal = default!;
    protected BlogDTO BlogDTO = new();
    private List<string> VideoUrls = new();
    private int NumVideos { get; set; }
    private HttpClient httpClient;
    private List<byte[]> uploadedImages = new(); // To store images as byte arrays
    private List<string> imagePreviews = new();  // To show image previews as base64 strings

    protected override void OnInitialized()
    {
    }

    private void RemoveVideo(int idx)
    {
        //Console.WriteLine(idx);
        //Console.WriteLine(VideoUrls.Count);
        //VideoUrls.ForEach(v=>Console.WriteLine(v));
        VideoUrls.RemoveAt(idx);
    }

    private async Task HandleFilesSelected(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);
            uploadedImages.Add(buffer);

            // Convert to base64 for preview
            var base64String = Convert.ToBase64String(buffer);
            var imagePreviewUrl = $"data:{file.ContentType};base64,{base64String}";
            imagePreviews.Add(imagePreviewUrl);
        }
    }

    private void BackToBlogs()
    {
        Navigation.NavigateTo("blogs", true);
    }

    private void AddVideos()
    {
        if (NumVideos > 5 || VideoUrls.Count == 5)
        {
            notificationModal.Show("Error", "Please enter in no more than 5 videos per blog", ModalType.ERROR);
        }
        for (int i = 0; i < NumVideos; i++)
        {
            VideoUrls.Add(string.Empty); // Add empty placeholders for each video URL
        }

        NumVideos = 0;

    }

    private async Task SubmitBlog()
    {
        httpClient = httpClientFactory.CreateClient(Constants.HTTP_CLIENT);

        BlogDTO.VideoUrls = VideoUrls.Select(url => new VideoUrlDTO { url = url}).ToList(); // Assign VideoUrls to the model
        BlogDTO.BlogImageDTOs = uploadedImages.Select(image => new BlogImageDTO
        {
            ImageData = image,
            ContentType = "image/jpeg" // Or detect the content type dynamically if needed
        }).ToList();
        
        // make api call

        var response = await httpClient.PostAsJsonAsync("api/Blogs/post-blog", BlogDTO);

        var data = await response.Content.ReadFromJsonAsync<GeneralResponse>();
        if (!data.Flag)
        {
            notificationModal.Show("Error", data.Message, ModalType.ERROR);
        }

        notificationModal.Show("Success", data.Message, ModalType.SUCCESS);

        // wait three seconds before navigating back to blogs
        await Task.Delay(3000);

        // Redirect or handle form submission as needed
        Navigation.NavigateTo("blogs", true);
    }
}
