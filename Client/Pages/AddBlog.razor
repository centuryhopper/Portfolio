@page "/addblog"
@inject NavigationManager Navigation

<h3>Add Blog</h3>

<div class="text-center">
    <button class="btn btn-primary" @onclick="BackToBlogs">Back to Blogs</button>
</div>

<EditForm Model="BlogDTO" OnValidSubmit="SubmitBlog">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="m-3">
        <label>Title</label>
        <InputText class="form-control" @bind-Value="BlogDTO.Title" />
    </div>

    <div class="m-3">
        <label>Date</label>
        <InputDate @bind-Value="BlogDTO.Date" class="form-control" />
    </div>

    <div class="m-3">
        <label>Description</label>
        <InputTextArea class="form-control" @bind-Value="BlogDTO.FullDesc" rows="10" />
    </div>

    <div id="videoUrls">
        @for (int i = 0; i < VideoUrls.Count; i++)
        {
            <div class="m-3">
                <label>Video URL @i</label>
                <InputText class="form-control" @bind-Value="VideoUrls[i]" />
            </div>
        }
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

<div class="m-3">
    <input class="form-control" type="number" placeholder="Enter number of videos you want to add" @bind="NumVideos">
    <button class="btn btn-secondary m-2" @onclick="AddVideos">Add Videos</button>
</div>

<NotificationModal @ref="notificationModal" />


@code {
    private NotificationModal notificationModal = default!;
    private BlogDTO BlogDTO = new();
    private List<string> VideoUrls = new();
    private int NumVideos { get; set; }
    private HttpClient httpClient;

    protected override void OnInitialized()
    {
        httpClient = httpClientFactory.CreateClient(Constants.HTTP_CLIENT);
    }

    private void BackToBlogs()
    {
        Navigation.NavigateTo("blogs", true);
    }

    private void AddVideos()
    {
        for (int i = 0; i < NumVideos; i++)
        {
            VideoUrls.Add(string.Empty); // Adds empty strings for each new video URL input
        }
    }

    private async Task SubmitBlog()
    {
        BlogDTO.VideoUrls = VideoUrls.Select(url => new VideoUrlDTO { url = url}).ToList(); // Assign VideoUrls to the model
        
        // make api call
        var response = await httpClient.PostAsJsonAsync("api/Blogs/post-blog", BlogDTO);
        var data = await response.Content.ReadFromJsonAsync<GeneralResponse>();
        if (!data.Flag)
        {
            notificationModal.Show("Error", data.Message, ModalType.ERROR);
        }

        notificationModal.Show("Success", data.Message, ModalType.SUCCESS);

        // wait three seconds before navigating back to blogs
        await Task.Delay(3000);

        // Redirect or handle form submission as needed
        Navigation.NavigateTo("blogs", true);
    }
}
