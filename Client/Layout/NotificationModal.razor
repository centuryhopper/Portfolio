
<div class="modal fade @(isVisible ? "show d-block" : "")" tabindex="-1" style="background: rgba(0, 0, 0, 0.5);">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Title</h5>
                <button type="button" class="btn-close" @onclick="Hide"></button>
            </div>
            <div class="modal-body">
                <p class="@modalClass">@BodyText</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="Hide" @ref="myButton">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    private bool isVisible = false;
    private string modalClass = string.Empty;

    private string Title { get; set; } = "Notification";
    private string BodyText { get; set; } = "Message";

    private TaskCompletionSource<bool>? taskCompletionSource;
    private ElementReference myButton;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (isVisible && myButton.Context is not null)
        {
            //Console.WriteLine("focusing!");
            // auto focus the close button
            await jsRuntime.InvokeVoidAsync("blazorFocusElement", myButton);
        }
    }


    //public void Show(string title, string message, ModalType type)
    //{
    //    Title = title;
    //    BodyText = message;
    //    SetModalClass(type);
    //    isVisible = true;
    //    StateHasChanged();
    //}

    public Task<bool> ShowAsync(string title, string message, ModalType type)
    {
        Title = title;
        BodyText = message;
        SetModalClass(type);
        isVisible = true;
        taskCompletionSource = new TaskCompletionSource<bool>();
        StateHasChanged();
        return taskCompletionSource.Task;
    }

    private void Hide()
    {
        isVisible = false;
        taskCompletionSource?.SetResult(true);
        StateHasChanged();
    }

    private void SetModalClass(ModalType modalType)
    {
        modalClass = modalType switch
        {
            ModalType.SUCCESS => "text-success",
            ModalType.WARNING => "text-warning",
            ModalType.ERROR => "text-danger",
            ModalType.INFO => "text-info",
            _ => ""
        };
    }
}
