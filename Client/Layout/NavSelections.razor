@inject IState<BlogPageState> BlogPageState
@inject IState<LoginButtonState> LoginButtonState
@implements IDisposable

<li class="nav-item">
    <a class="nav-link" href="">
        <i class="fa-solid fa-house"></i>
        <span class="m-3 nav-text">Home</span>
    </a>
</li>
<li class="nav-item">
    <a class="nav-link" href="aboutme">
        @* <i class="fa-solid fa-user"></i> *@
        <i class="fa-solid fa-briefcase"></i>
        <span class="m-3 nav-text">About Me</span>
    </a>
</li>
<li class="nav-item">
    <a class="nav-link" href="blogs">
        <i class="fa-solid fa-blog"></i>
        <span class="m-3 nav-text">Blogs</span>
    </a>
</li>
<li class="nav-item">
    <a class="nav-link" href="contact">
        <i class="fa-solid fa-address-book"></i>
        <span class="m-3 nav-text">Contact Me</span>
    </a>
</li>
<li class="nav-item">
    <a class="nav-link" href="projects">
        <i class="fa-solid fa-code"></i>
        <span class="m-3 nav-text">Projects</span>
    </a>
</li>
<li class="nav-item">
    <a class="nav-link" href="skills">
        <i class="fa-solid fa-screwdriver-wrench"></i>
        <span class="m-3 nav-text">Skills</span>
    </a>
    @* <div>@BlogPageState.Value.IsNewest</div>
    <div>@LoginButtonState.Value.IsLoginButtonVisible</div> *@
</li>

@code {
    
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            BlogPageState.StateChanged += StateChanged;
            LoginButtonState.StateChanged += StateChanged;
        }
    }

    public void StateChanged(object sender, EventArgs args)
    {
        InvokeAsync(StateHasChanged);
    }

    void IDisposable.Dispose()
    {
        BlogPageState.StateChanged -= StateChanged;
        LoginButtonState.StateChanged -= StateChanged;
    }
}